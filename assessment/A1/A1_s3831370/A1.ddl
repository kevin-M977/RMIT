-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2023-09-13 03:59:25 AEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

DROP TABLE Ballot;
DROP TABLE BallotPreferences;
DROP TABLE Candidate;
DROP TABLE ElectionEvent;
DROP TABLE ElectionMaster;
DROP TABLE Electorate;
DROP TABLE FinalResult;
DROP TABLE IssuanceRecord;
DROP TABLE PoliticalParty;
DROP TABLE PrefDistribution;
DROP TABLE VoteCountRound;
DROP TABLE VoterAddress;
DROP TABLE VoterRegistry;


CREATE TABLE Ballot (
    BallotID       VARCHAR2(20 BYTE) NOT NULL,
    ElectorateName VARCHAR2(100 BYTE) NOT NULL,
    ElectionID     VARCHAR2(20 BYTE) NOT NULL
)
STORAGE (
    INITIAL 5000K     -- Initial size of 5,000 KB (or 5 MB)
    NEXT 2500K        -- Next extent size of 2,500 KB (or 2.5 MB)
    MAXSIZE UNLIMITED -- Allow the table to grow as needed
);

ALTER TABLE ballot ADD CONSTRAINT ballot_pk PRIMARY KEY ( BallotID );

CREATE TABLE BallotPreferences (
    Preference     VARCHAR2(50 BYTE),
    BallotID      VARCHAR2(20 BYTE) NOT NULL,
    CandidateID    VARCHAR2(20 BYTE) NOT NULL,
    ElectorateName VARCHAR2(100) NOT NULL,
    ElectionID     VARCHAR2(20) NOT NULL
)
STORAGE (
    INITIAL 6000000K   -- Initial size of 6,000,000 KB (or 6 GB)
    NEXT 3000000K      -- Next extent size of 3,000,000 KB (or 3 GB)
    MAXSIZE UNLIMITED  -- Allow the table to grow as needed
);

ALTER TABLE BallotPreferences ADD CONSTRAINT BallotPreferences_pk PRIMARY KEY ( BallotID, CandidateID );

CREATE TABLE Candidate (
    CandidateID    VARCHAR2(20 BYTE) NOT NULL,
    CandidateName  VARCHAR2(100 BYTE),
    ContactDetails VARCHAR2(100 BYTE),
    PartyCode      VARCHAR2(20 BYTE) NOT NULL,
    Electorate     VARCHAR2(100 BYTE)
);

ALTER TABLE Candidate ADD CONSTRAINT Candidate_pk PRIMARY KEY ( CandidateID );

CREATE TABLE ElectionEvent (
    ElectorateName VARCHAR2(100 BYTE) NOT NULL,
    ElectionID     VARCHAR2(20 BYTE) NOT NULL
);

ALTER TABLE ElectionEvent ADD CONSTRAINT ElectionEvent_pk PRIMARY KEY ( ElectorateName, ElectionID );

CREATE TABLE ElectionMaster (
    ElectionID       VARCHAR2(20 BYTE) NOT NULL,
    ElectionMasterID INTEGER NOT NULL,
    ElectionDate     DATE
);

ALTER TABLE ElectionMaster ADD CONSTRAINT ElectionMaster_pk PRIMARY KEY ( ElectionID );

CREATE TABLE Electorate (
    ElectorateName          VARCHAR2(100 BYTE) NOT NULL,
    RegisteredVoters        INTEGER,
    CurrentParliamentMember VARCHAR2(20 BYTE)
);

ALTER TABLE Electorate ADD CONSTRAINT Electorate_pk PRIMARY KEY ( ElectorateName );

CREATE TABLE FinalResult (
    ElectorateName VARCHAR2(100 BYTE) NOT NULL,
    ElectionID     VARCHAR2(20 BYTE) NOT NULL,
    CandidateID    VARCHAR2(20 BYTE) NOT NULL,
    FinalPrefCount INTEGER
);

ALTER TABLE FinalResult ADD CONSTRAINT FinalResult_pk PRIMARY KEY ( ElectorateName, ElectionID, CandidateID );

CREATE TABLE IssuanceRecord (
    IssueDate      DATE,
    IssueTimestamp TIMESTAMP,
    PollingStation VARCHAR2(20 BYTE),
    VoterID        VARCHAR2(20 BYTE) NOT NULL,
    ElectorateName VARCHAR2(100 BYTE) NOT NULL,
    ElectionID     VARCHAR2(20 BYTE) NOT NULL
);

ALTER TABLE IssuanceRecord ADD CONSTRAINT IssuanceRecord_pk PRIMARY KEY ( VoterID );

CREATE TABLE PoliticalParty (
    PartyCode         VARCHAR2(20 BYTE) NOT NULL,
    PartyName         VARCHAR2(100 BYTE),
    PartyLogo         VARCHAR2(20 BYTE),
    PartyAddress      VARCHAR2(100 BYTE),
    Secretary         VARCHAR2(30 BYTE),
    PartyContactEmail VARCHAR2(30 BYTE)
);

ALTER TABLE PoliticalParty ADD CONSTRAINT PoliticalParty_pk PRIMARY KEY ( PartyCode );

CREATE TABLE PrefDistribution (
    PrefCount      INTEGER,
    RoundNum       INTEGER NOT NULL,
    ElectorateName VARCHAR2(100 BYTE) NOT NULL,
    ElectionID     VARCHAR2(20 BYTE) NOT NULL,
    CandidateID    VARCHAR2(20 BYTE) NOT NULL
);

ALTER TABLE prefdistribution ADD CONSTRAINT prefdistribution_pk PRIMARY KEY ( CandidateID, RoundNum, ElectorateName, ElectionID );

CREATE TABLE VoteCountRound (
    RoundNum       INTEGER NOT NULL,
    ElectorateName VARCHAR2(100 BYTE) NOT NULL,
    ElectionID     VARCHAR2(20 BYTE) NOT NULL
);

ALTER TABLE VoteCountRound ADD CONSTRAINT VoteCountRound_pk PRIMARY KEY ( RoundNum, ElectorateName, ElectionID );

CREATE TABLE VoterAddress (
    AddressID           VARCHAR2(20 BYTE) NOT NULL,
    ResidentialAddress  VARCHAR2(100 BYTE),
    ResidentialState    VARCHAR2(20 BYTE),
    ResidentialPostcode VARCHAR2(20 BYTE),
    PostalAddress       VARCHAR2(100 BYTE),
    PostalState         VARCHAR2(20 BYTE),
    PostalPostcode      VARCHAR2(20 BYTE)
);

ALTER TABLE VoterAddress ADD CONSTRAINT VoterAddress_pk PRIMARY KEY ( AddressID );

CREATE TABLE VoterRegistry (
    VoterID      VARCHAR2(20 BYTE) NOT NULL,
    Title        VARCHAR2(20 BYTE),
    FirstName    VARCHAR2(20 BYTE),
    MiddleName   VARCHAR2(20 BYTE),
    LastName     VARCHAR2(20 BYTE),
    Gender       VARCHAR2(20 BYTE),
    DOB          DATE,
    Contactemail VARCHAR2(40 BYTE),
    Electorate   VARCHAR2(20 BYTE),
    AddressID    VARCHAR2(20 BYTE) NOT NULL
)   
STORAGE (
    INITIAL 3458000K   -- Initial size of 3,458,000 KB (or 3.458 GB)
    NEXT 1729000K      -- Next extent size of 1,729,000 KB (or 1.729 GB)
    MAXSIZE UNLIMITED  -- Allow the table to grow as needed
);

ALTER TABLE VoterRegistry ADD CONSTRAINT VoterRegistry_pk PRIMARY KEY ( VoterID );

ALTER TABLE Ballot
    ADD CONSTRAINT Ballot_ElectionEvent_fk FOREIGN KEY ( ElectorateName, ElectionID )
        REFERENCES Electionevent ( ElectorateName, ElectionID );

ALTER TABLE BallotPreferences
    ADD CONSTRAINT BallotPreferences_Ballot_fk FOREIGN KEY ( BallotID )
        REFERENCES Ballot ( BallotID );

ALTER TABLE BallotPreferences
    ADD CONSTRAINT BallotPreferences_Candidate_fk FOREIGN KEY ( CandidateID )
        REFERENCES Candidate ( CandidateID );

ALTER TABLE Candidate
    ADD CONSTRAINT Candidate_PoliticalParty_fk FOREIGN KEY ( PartyCode )
        REFERENCES PoliticalParty ( PartyCode );

ALTER TABLE ElectionEvent
    ADD CONSTRAINT ElectionEvent_ElectionMaster_fk FOREIGN KEY ( ElectionID )
        REFERENCES ElectionMaster ( ElectionID );

ALTER TABLE ElectionEvent
    ADD CONSTRAINT ElectionEvent_Electorate_fk FOREIGN KEY ( ElectorateName )
        REFERENCES Electorate ( ElectorateName );

ALTER TABLE FinalResult
    ADD CONSTRAINT FinalResult_Candidate_fk FOREIGN KEY ( CandidateID )
        REFERENCES Candidate ( CandidateID );

ALTER TABLE FinalResult
    ADD CONSTRAINT FinalResult_ElectionEvent_fk FOREIGN KEY ( ElectorateName, ElectionID )
        REFERENCES ElectionEvent ( ElectorateName, ElectionID );
 
ALTER TABLE IssuanceRecord
    ADD CONSTRAINT IssuanceRecord_ElectionEvent_fk FOREIGN KEY ( ElectorateName, ElectionID )
        REFERENCES ElectionEvent ( ElectorateName, ElectionID );

ALTER TABLE IssuanceRecord
    ADD CONSTRAINT IssuanceRecord_VoterRegistry_fk FOREIGN KEY ( VoterID )
        REFERENCES VoterRegistry ( VoterID );

ALTER TABLE PrefDistribution
    ADD CONSTRAINT PrefDistribution_Candidate_fk FOREIGN KEY ( CandidateID )
        REFERENCES Candidate ( CandidateID );

ALTER TABLE PrefDistribution
    ADD CONSTRAINT PrefDistribution_VoteCountRound_fk FOREIGN KEY ( RoundNum, ElectorateName, ElectionID )
        REFERENCES VoteCountRound ( RoundNum, ElectorateName, ElectionID );

ALTER TABLE VoteCountRound
    ADD CONSTRAINT VoteCountRound_ElectionEvent_fk FOREIGN KEY ( ElectorateName, ElectionID )
        REFERENCES ElectionEvent ( ElectorateName, ElectionID );

ALTER TABLE VoterRegistry
    ADD CONSTRAINT VoterRegistry_VoterAddress_fk FOREIGN KEY ( AddressID )
        REFERENCES VoterAddress ( AddressID );
        
-- Task 2-1
-- Before adding the indexes
SELECT Electorate, COUNT(*) AS TotalVoters
FROM VoterRegistry
GROUP BY Electorate
ORDER BY TotalVoters DESC;

-- Index on VoterRegistry(Electorate)
CREATE INDEX idx_electorate_name ON VoterRegistry (Electorate);

-- After adding the indexes
SELECT Electorate, COUNT(*) AS TotalVoters
FROM VoterRegistry
GROUP BY Electorate
ORDER BY TotalVoters DESC;


-- Task 2-2
-- Before adding the indexes
SELECT
    E.ElectorateName,
    C.CandidateName,
    C.PartyCode
FROM
    Electorate E
    JOIN Candidate C ON E.ElectorateName = C.Electorate
    JOIN ElectionEvent EE ON E.ElectorateName = EE.ElectorateName
WHERE
    EE.ElectionID = '20220521'
ORDER BY
    E.ElectorateName,
    DBMS_RANDOM.RANDOM;

-- Index on Candidate.Electorate
CREATE INDEX idx_candidate_electorate ON Candidate (Electorate);

-- Index on ElectionEvent.ElectionID
CREATE INDEX idx_electionevent_electionid ON ElectionEvent (ElectionID);

-- After adding the indexes
EXPLAIN PLAN FOR
SELECT
    e.ElectorateName,
    c.CandidateName,
    c.PartyCode
FROM
    Electorate E
    JOIN Candidate C ON E.ElectorateName = C.Electorate
    JOIN ElectionEvent EE ON e.ElectorateName = EE.ElectorateName
WHERE
    EE.ElectionID = '20220521'
ORDER BY
    E.ElectorateName,
    DBMS_RANDOM.RANDOM;

-- Display the execution plan
SELECT * 
FROM TABLE(DBMS_XPLAN.DISPLAY);


-- Task 2-3
-- Before adding the indexes
EXPLAIN PLAN FOR
SELECT VR.FirstName, VR.LastName
FROM VoterRegistry VR
WHERE VR.VoterID NOT IN (
    SELECT IR.VoterID
    FROM IssuanceRecord IR
    WHERE IR.ElectionID = '20220521'
) AND VR.VoterID NOT IN (
    SELECT IR.VoterID
    FROM IssuanceRecord IR
    WHERE IR.ElectionID = '20190518'
);

-- Index on IssuanceRecord
CREATE INDEX idx_IssuanceRecord_ElectionID ON IssuanceRecord (ElectionID);

-- Index on VoterRegistry
CREATE INDEX idx_VoterRegistry_VoterID ON VoterRegistry (VoterID);

-- After adding the indexes
EXPLAIN PLAN FOR
SELECT VR.FirstName, VR.LastName
FROM VoterRegistry VR
WHERE VR.VoterID NOT IN (
    SELECT IR.VoterID
    FROM IssuanceRecord IR
    WHERE IR.ElectionID = '20220521'
) AND VR.VoterID NOT IN (
    SELECT IR.VoterID
    FROM IssuanceRecord IR
    WHERE IR.ElectionID = '20190518'
);

-- Task 3: Partitioning strategy
-- Ballot Table Partitioning
CREATE TABLE Ballot (
    BallotID       VARCHAR2(20 BYTE) NOT NULL,
    ElectorateName VARCHAR2(100 BYTE) NOT NULL,
    ElectionID     VARCHAR2(20 BYTE) NOT NULL
)
PARTITION BY RANGE (ElectionID)(
    PARTITION p_election_2022 VALUES LESS THAN ('2023'),
    PARTITION p_election_2023 VALUES LESS THAN ('2024'),
    --...
    PARTITION p_election_future VALUES LESS THAN (MAXVALUE)
);

-- BallotPreferences Table Partitioning
CREATE TABLE BallotPreferences (
    Preference     VARCHAR2(50 BYTE),
    BallotID      VARCHAR2(20 BYTE) NOT NULL,
    CandidateID    VARCHAR2(20 BYTE) NOT NULL,
    ElectorateName VARCHAR2(100) NOT NULL,
    ElectionID     VARCHAR2(20) NOT NULL
)
PARTITION BY LIST (ElectorateName)(
    PARTITION p_electorate_north VALUES ('North Electorate'),
    PARTITION p_electorate_south VALUES ('South Electorate'),
    --...
    PARTITION p_electorate_other VALUES (DEFAULT)
);

-- VoterRegistry Table Partitioning
CREATE TABLE VoterRegistry (
    VoterID      VARCHAR2(20 BYTE) NOT NULL,
    Title        VARCHAR2(20 BYTE),
    FirstName    VARCHAR2(20 BYTE),
    MiddleName   VARCHAR2(20 BYTE),
    LastName     VARCHAR2(20 BYTE),
    Gender       VARCHAR2(20 BYTE),
    DOB          DATE,
    Contactemail VARCHAR2(40 BYTE),
    Electorate   VARCHAR2(20 BYTE),
    AddressID    VARCHAR2(20 BYTE) NOT NULL
)   
PARTITION BY RANGE (DOB)(
    PARTITION p_dob_1980s VALUES LESS THAN (TO_DATE('01-01-1990', 'DD-MM-YYYY')),
    PARTITION p_dob_1990s VALUES LESS THAN (TO_DATE('01-01-2000', 'DD-MM-YYYY')),
    PARTITION p_dob_2000s VALUES LESS THAN (TO_DATE('01-01-2010', 'DD-MM-YYYY')),
    PARTITION p_dob_2010s VALUES LESS THAN (TO_DATE('01-01-2020', 'DD-MM-YYYY')),
    PARTITION p_dob_2020s VALUES LESS THAN (TO_DATE('01-01-2030', 'DD-MM-YYYY')),
    PARTITION p_dob_future VALUES LESS THAN (MAXVALUE)
);

-- Task 4: previouslyVoted()
CREATE OR REPLACE FUNCTION previouslyVoted(P_ElectionID IN VARCHAR2, P_ElectorateName IN VARCHAR2, P_VoterID IN VARCHAR2)
RETURN BOOLEAN IS V_VoteCount INTEGER;
BEGIN
    -- Check if the voter has voted before in the given election
    SELECT COUNT(*) 
    INTO V_VoteCount
    FROM IssuanceRecord IR
    WHERE IR.ElectionID = P_ElectionID
    AND IR.ElectorateName = P_ElectorateName
    AND IR.VoterID = P_VoterID;

    -- Return true if the vote count is greater than 0, indicating the voter has voted before
    IF V_VoteCount > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;    
END previouslyVoted;

-- Task 5: primaryVoteCount()
CREATE OR REPLACE PROCEDURE primaryVoteCount(
    p_ElectionID VARCHAR2,
    p_ElectorateName VARCHAR2
)
AS
BEGIN
    -- Delete any existing primary vote records for the given election and electorate
    DELETE FROM FinalResult
    WHERE ElectionID = p_ElectionID
    AND ElectorateName = p_ElectorateName;

    -- Calculate and insert primary votes for each candidate in the chosen electorate and election
    INSERT INTO FinalResult (ElectionID, ElectorateName, CandidateID, FinalPrefCount)
    SELECT
        p_ElectionID,
        p_ElectorateName,
        BP.CandidateID,
        COUNT(*) AS PrimaryVotes
    FROM BallotPreferences BP
    WHERE BP.ElectionID = p_ElectionID
    AND BP.ElectorateName = p_ElectorateName
    AND BP.Preference = '1' -- Assuming '1' represents the first preference
    GROUP BY BP.CandidateID;

    COMMIT;
END primaryVoteCount;

-- Task 6: distributePreferences()
CREATE OR REPLACE PROCEDURE distributePreferences(electionCode IN VARCHAR2, electorateName IN VARCHAR2) AS
    -- Declare variables for processing
    roundNumber NUMBER := 1;
    candidateCount NUMBER := 0;
BEGIN
    -- Get the total number of candidates in this election and electorate
    SELECT COUNT(DISTINCT CandidateID)
    INTO candidateCount
    FROM BallotPreferences
    WHERE ElectionID = electionCode
    AND ElectorateName = electorateName;

    -- Loop until all preferences have been distributed
    WHILE roundNumber <= candidateCount LOOP
        -- Insert preference distribution data into PrefDistribution table
        INSERT INTO PrefDistribution (PrefCount, RoundNum, ElectorateName, ElectionID, CandidateID)
        SELECT
            COUNT(*),
            roundNumber,
            electorateName,
            electionCode,
            bp.CandidateID
        FROM
            BallotPreferences bp
        WHERE
            bp.ElectionID = electionCode
            AND bp.ElectorateName = electorateName
            AND bp.Preference = roundNumber
        GROUP BY
            roundNumber,
            electorateName,
            electionCode,
            bp.CandidateID;

        -- Update FinalResult table with preference counts
        FOR candidateRow IN (SELECT DISTINCT CandidateID FROM BallotPreferences WHERE ElectionID = electionCode AND ElectorateName = electorateName) LOOP
            UPDATE FinalResult fr
            SET fr.FinalPrefCount = (
                SELECT SUM(pd.PrefCount)
                FROM PrefDistribution pd
                WHERE
                    pd.RoundNum = roundNumber
                    AND pd.ElectorateName = electorateName
                    AND pd.ElectionID = electionCode
                    AND pd.CandidateID = candidateRow.CandidateID
            )
            WHERE
                fr.ElectorateName = electorateName
                AND fr.ElectionID = electionCode
                AND fr.CandidateID = candidateRow.CandidateID;
        END LOOP;

        roundNumber := roundNumber + 1; -- Move to the next round
    END LOOP;
END distributePreferences;
